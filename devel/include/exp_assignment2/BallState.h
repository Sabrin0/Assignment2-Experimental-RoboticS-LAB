// Generated by gencpp from file exp_assignment2/BallState.msg
// DO NOT EDIT!


#ifndef EXP_ASSIGNMENT2_MESSAGE_BALLSTATE_H
#define EXP_ASSIGNMENT2_MESSAGE_BALLSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exp_assignment2
{
template <class ContainerAllocator>
struct BallState_
{
  typedef BallState_<ContainerAllocator> Type;

  BallState_()
    : BallDetected(false)
    , currentRadius(0.0)  {
    }
  BallState_(const ContainerAllocator& _alloc)
    : BallDetected(false)
    , currentRadius(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _BallDetected_type;
  _BallDetected_type BallDetected;

   typedef double _currentRadius_type;
  _currentRadius_type currentRadius;





  typedef boost::shared_ptr< ::exp_assignment2::BallState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exp_assignment2::BallState_<ContainerAllocator> const> ConstPtr;

}; // struct BallState_

typedef ::exp_assignment2::BallState_<std::allocator<void> > BallState;

typedef boost::shared_ptr< ::exp_assignment2::BallState > BallStatePtr;
typedef boost::shared_ptr< ::exp_assignment2::BallState const> BallStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exp_assignment2::BallState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exp_assignment2::BallState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace exp_assignment2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'exp_assignment2': ['/home/sabrino/exprob/Assignment2-Experimental-RoboticS-LAB/src/exp_assignment2/msg', '/home/sabrino/exprob/Assignment2-Experimental-RoboticS-LAB/devel/share/exp_assignment2/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::exp_assignment2::BallState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exp_assignment2::BallState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exp_assignment2::BallState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exp_assignment2::BallState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exp_assignment2::BallState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exp_assignment2::BallState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exp_assignment2::BallState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ead8a4581df1f9430fd7170d4a41e9e";
  }

  static const char* value(const ::exp_assignment2::BallState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ead8a4581df1f94ULL;
  static const uint64_t static_value2 = 0x30fd7170d4a41e9eULL;
};

template<class ContainerAllocator>
struct DataType< ::exp_assignment2::BallState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exp_assignment2/BallState";
  }

  static const char* value(const ::exp_assignment2::BallState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exp_assignment2::BallState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool BallDetected\n\
float64 currentRadius\n\
\n\
\n\
";
  }

  static const char* value(const ::exp_assignment2::BallState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exp_assignment2::BallState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.BallDetected);
      stream.next(m.currentRadius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BallState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exp_assignment2::BallState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exp_assignment2::BallState_<ContainerAllocator>& v)
  {
    s << indent << "BallDetected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BallDetected);
    s << indent << "currentRadius: ";
    Printer<double>::stream(s, indent + "  ", v.currentRadius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXP_ASSIGNMENT2_MESSAGE_BALLSTATE_H
